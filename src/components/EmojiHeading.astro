---
// EmojiHeading.astro - A component to handle headings with emoji prefixes
import { tagDataMap } from "../config";
import { stripEmoji } from "../utils/stripEmoji";

export interface Props {
  text: string;
  level?: 1 | 2 | 3 | 4 | 5 | 6;
  class?: string;
  id?: string;
  transition?: string;
}

const { text, level = 1, class: className = "", id, transition } = Astro.props;

// Try to get emoji from tag data map first (for consistency in tag pages)
let emoji = null;
let displayText = text;

// Get the plain text key for tag data lookup (if this is a tag)
const plainTagKey = transition ? stripEmoji(transition).toLowerCase() : null;

// If this is a known tag (like on tag pages), use the emoji from our map
if (transition && tagDataMap[plainTagKey]) {
  emoji = tagDataMap[plainTagKey].emoji;
  displayText = tagDataMap[plainTagKey].text;
} else {
  // Otherwise, extract emoji from the text
  // First try to detect if there's an emoji prefix
  const match = text.match(
    /^([\p{Emoji}\p{Emoji_Component}\p{Emoji_Modifier}\p{Emoji_Presentation}\u{FE00}-\u{FE0F}]+)/gu
  );

  if (match && match[0]) {
    // If emoji found, use it and strip from text
    emoji = match[0];
    displayText = stripEmoji(text).trim();
  } else {
    // No emoji, just use the text as is
    emoji = null;
    displayText = text;
  }

  // If we stripped everything, use original text
  if (!displayText) {
    displayText = text;
  }
}

// Generate the appropriate heading tag
const HeadingTag = `h${level}`;

// Generate transition attributes if provided
const transitionAttr = transition ? { "transition:name": transition } : {};
---

<HeadingTag class={className} id={id} {...transitionAttr}>
  {
    emoji && (
      <span
        class="emoji"
        style="float: left; margin-left: -1.75em; margin-right: 0.25em; color: rgba(0,0,0,0.25); font-size: 1.5em;"
      >
        {emoji}
      </span>
    )
  }
  {displayText}
</HeadingTag>
