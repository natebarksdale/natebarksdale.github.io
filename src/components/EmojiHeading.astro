---
// EmojiHeading.astro - A component to handle headings with emoji prefixes
import { tagDataMap } from "../config";

export interface Props {
  text: string;
  level?: 1 | 2 | 3 | 4 | 5 | 6;
  class?: string;
  id?: string;
  transition?: string;
}

const { text, level = 1, class: className = "", id, transition } = Astro.props;

// Try to get emoji from tag data map first (for consistency in tag pages)
let emoji = null;
let displayText = text;

// If this is a known tag (like on tag pages), use the emoji from our map
if (transition && tagDataMap[transition.toLowerCase()]) {
  emoji = tagDataMap[transition.toLowerCase()].emoji;
  displayText = tagDataMap[transition.toLowerCase()].text;
} else {
  // Otherwise, try to split emoji from text
  function splitEmojiFromText(content: string) {
    if (!content) return { emoji: null, text: content };

    // Try multiple emoji detection patterns
    const patterns = [
      /^(\p{Emoji}+)/u,
      /^(\p{Extended_Pictographic}+)/u,
      /^([\u{1F300}-\u{1F6FF}\u{2600}-\u{26FF}]+)/u,
    ];

    for (const pattern of patterns) {
      const match = content.match(pattern);
      if (match && match[1]) {
        return {
          emoji: match[1],
          text: content.slice(match[1].length).trim(),
        };
      }
    }

    return { emoji: null, text: content };
  }

  // Process the content if not from the tag map
  const { emoji: detectedEmoji, text: remainingText } =
    splitEmojiFromText(text);
  emoji = detectedEmoji;
  displayText = remainingText || text;
}

// Generate the appropriate heading tag
const HeadingTag = `h${level}`;

// Generate transition attributes if provided
const transitionAttr = transition ? { "transition:name": transition } : {};
---

<HeadingTag class={className} id={id} {...transitionAttr}>
  {
    emoji && (
      <span
        class="emoji"
        style="float: left; margin-left: -1.75em; margin-right: 0.25em; color: rgba(0,0,0,0.25); font-size: 1.5em;"
      >
        {emoji}
      </span>
    )
  }
  {displayText}
</HeadingTag>
