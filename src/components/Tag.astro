---
export interface Props {
  tag: string;
  size?: "sm" | "lg";
  tagName?: string;
}

function splitEmojiTag(tagName) {
  if (!tagName || typeof tagName !== "string") return { emoji: "", text: "" };

  // Try multiple regex patterns for better emoji detection
  const patterns = [
    /^(\p{Emoji}+)/u,
    /^(\p{Extended_Pictographic}+)/u,
    /^([\u{1F300}-\u{1F6FF}\u{2600}-\u{26FF}]+)/u,
  ];

  for (const pattern of patterns) {
    const match = tagName.match(pattern);
    if (match && match[1]) {
      return {
        emoji: match[1],
        text: tagName.slice(match[1].length).trim(),
      };
    }
  }

  return { emoji: "", text: tagName };
}

const { tag, tagName, size = "sm" } = Astro.props;
const displayTag = tagName ?? tag ?? "";
const { emoji, text } = splitEmojiTag(displayTag);
---

<li class={`inline-block ${size === "sm" ? "my-1 " : "my-3 mx-1"}`}>
  <a
    href={`/tags/${tag}/`}
    transition:name={tag}
    class={`${size === "sm" ? "text-sm" : "text-lg"} pr-2 group`}
    data-tag-name={tagName ?? tag}
  >
    {emoji && <span class="emoji">{emoji}</span>}
    <span class="tag-text">{text}</span>
  </a>
</li>

<style>
  a {
    @apply relative hover:-top-0.5 hover:text-skin-accent focus-visible:p-1;
  }
  a svg {
    @apply -mr-5 h-6 w-6 scale-95 text-skin-base opacity-80 group-hover:fill-skin-accent;
  }

  /* Add a slight highlight on hover for better interaction feedback */
  a:hover {
    @apply animate-pulse;
  }

  /* Display emoji slightly larger for better visibility */
  .emoji {
    @apply text-lg mr-1;
  }
</style>
