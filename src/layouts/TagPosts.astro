---
import { type CollectionEntry } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Card from "@components/Card";
import Pagination from "@components/Pagination.astro";
import { SITE } from "@config";

export interface Props {
  currentPage: number;
  totalPages: number;
  paginatedPosts: CollectionEntry<"blog">[];
  tag: string;
  tagName: string;
}

const { currentPage, totalPages, paginatedPosts, tag, tagName } = Astro.props;

// Manual emoji extraction function - more reliable for specific use case
function splitEmojiTag(tag: string) {
  console.log("Processing tag:", tag);

  // Simple function to check if a character is likely an emoji
  // This works for most common emojis which are in a specific Unicode range
  const isEmoji = (char: string) => {
    const cp = char.codePointAt(0);
    return cp !== undefined && cp >= 0x1f000;
  };

  // If the tag starts with an emoji character
  if (tag.length > 0 && isEmoji(tag[0])) {
    // Get just the first character (the emoji)
    const emoji = tag[0];

    // Remove the emoji from the beginning of the tag
    const text = tag.slice(1).trim();

    console.log("Extracted emoji:", emoji, "and text:", text);
    return { emoji, text };
  }

  console.log("No emoji found in tag");
  return { emoji: null, text: tag };
}

// Extract emoji if present
const { emoji, text } = splitEmojiTag(tagName);

// Log for debugging
console.log(`Tag "${tagName}" parsed as emoji: "${emoji}" and text: "${text}"`);
console.log("First character code point:", tagName.codePointAt(0));
---

<Layout title={`Tag: ${tagName} | ${SITE.title}`}>
  <Header activeNav="tags" />
  <Main>
    <h1 class="text-2xl font-serif sm:text-3xl mt-1 mb-2" transition:name={tag}>
      {/* Force emoji rendering with server-side check */}
      {
        tagName.codePointAt(0) && tagName.codePointAt(0)! >= 0x1f000 ? (
          <>
            <span
              class="emoji float-left"
              style="margin-left: -1.75em; margin-right: -0.5em; color: rgba(0,0,0,0.2); font-size: 1.5em;"
            >
              {tagName.charAt(0)}
            </span>
            {tagName.slice(1).trim()}
          </>
        ) : (
          tagName
        )
      }
    </h1>
    <ul>
      {
        paginatedPosts.map(({ data, slug }) => (
          <Card href={`/posts/${slug}/`} frontmatter={data} />
        ))
      }
    </ul>
  </Main>

  <Pagination
    {currentPage}
    {totalPages}
    prevUrl={`/tags/${tag}${
      currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""
    }/`}
    nextUrl={`/tags/${tag}/${currentPage + 1}/`}
  />

  <Footer noMarginTop={totalPages > 1} />
</Layout>
