---
import { type CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Card from "@components/Card";
import TagMap from "@components/TagMap";
import Pagination from "@components/Pagination.astro";
import { SITE } from "@config";

export interface Props {
  currentPage: number;
  totalPages: number;
  paginatedPosts: CollectionEntry<"blog">[];
  tag: string;
  tagName: string;
}

const { currentPage, totalPages, paginatedPosts, tag, tagName } = Astro.props;

// Fetch all posts to create the map data
const allPosts = await getCollection("blog", ({ data }) => !data.draft);

// Filter posts for the current tag that have coordinates
const taggedPostsWithCoordinates = allPosts
  .filter(post => post.data.tags?.includes(tagName) && post.data.coordinates)
  .map(post => ({
    type: "Feature",
    geometry: {
      type: "Point",
      coordinates: [post.data.coordinates[1], post.data.coordinates[0]], // [longitude, latitude]
    },
    properties: {
      title: post.data.title,
      slug: post.slug,
    },
  }));

// Create GeoJSON data for the map
const mapboxToken = import.meta.env.PUBLIC_MAPBOX_ACCESS_TOKEN;
const geojson = {
  type: "FeatureCollection",
  features: taggedPostsWithCoordinates,
};

// Should we show the map? Only if we have posts with coordinates
const showMap = taggedPostsWithCoordinates.length > 0;

// Let's use a hardcoded mapping approach to ensure consistent emoji rendering
// This avoids any issues with character encoding or server-side processing
const emojiTagMap: Record<string, { emoji: string; text: string }> = {
  manuscripts: { emoji: "üè∫", text: "Manuscripts" },
  // Add more mappings as needed for other tag categories
};

// Get the tag info - either from our map or construct a default
// For server-side rendering, we'll pass the full tag name to the H1 element
// The emoji processing will be done by client-side JavaScript after page load
---

<Layout title={`Tag: ${tagName} | ${SITE.title}`}>
  <Header activeNav="tags" />
  <Main>
    <h1
      class="text-2xl font-serif sm:text-3xl mt-1 mb-2"
      transition:name={tag}
      id="tag-title"
    >
      {tagName}
    </h1>

    <!-- Removed the inline script since we now use the global emoji-processor.js -->

    {/* Show the map only if we have posts with coordinates */}
    {
      showMap && (
        <div class="my-6">
          <TagMap
            client:only="react"
            geojson={geojson}
            mapboxToken={mapboxToken}
          />
          <p class="text-xs text-center mt-1 text-gray-500">
            {taggedPostsWithCoordinates.length} post
            {taggedPostsWithCoordinates.length !== 1 ? "s" : ""} from this tag
            have locations
          </p>
        </div>
      )
    }

    <ul class="mt-4">
      {
        paginatedPosts.map(({ data, slug }) => (
          <Card href={`/posts/${slug}/`} frontmatter={data} />
        ))
      }
    </ul>
  </Main>

  <Pagination
    {currentPage}
    {totalPages}
    prevUrl={`/tags/${tag}${
      currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""
    }/`}
    nextUrl={`/tags/${tag}/${currentPage + 1}/`}
  />

  <Footer noMarginTop={totalPages > 1} />
</Layout>
