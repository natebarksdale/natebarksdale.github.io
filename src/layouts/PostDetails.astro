---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import MapIllustrationWrapper from "@components/MapIllustrationWrapper.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import wrapEmojis from "@utils/wrapEmojis";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";
import PostNavigation from "@components/RandomPostNavigation";
import ShareModal from "@components/ShareModal";

export interface Props {
  post: CollectionEntry<"blog">;
  nextPost: CollectionEntry<"blog"> | null;
  prevPost: CollectionEntry<"blog"> | null;
  sortedPosts: CollectionEntry<"blog">[];
}

const { post, nextPost, prevPost, sortedPosts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
} = post.data;

// Just render the content normally
const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
  tags,
};

const allPosts = await getCollection("blog", ({ data }) => !data.draft);

const currentIndex = sortedPosts.findIndex(p => p.slug === post.slug);

const mapboxToken = import.meta.env.PUBLIC_MAPBOX_ACCESS_TOKEN;

const url = new URL(Astro.url.pathname, Astro.site).toString();
---

<Layout {...layoutProps}>
  <Header />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Go back</span>
    </button>
  </div>
  <main id="main-content">
    {
      post.data.coordinates && (
        <div class="relative w-full mt-4">
          <MapIllustrationWrapper
            title={title}
            coordinates={post.data.coordinates}
            mapboxToken={mapboxToken}
          />
        </div>
      )
    }

    <h1 transition:name={slugifyStr(title)} class="post-title mt-4">{title}</h1>
    <Datetime
      pubDatetime={pubDatetime}
      modDatetime={modDatetime}
      size="lg"
      className="my-2"
    />
    <article
      id="article"
      role="article"
      class="prose mx-auto mt-8 text-xl max-w-3xl"
    >
      <Content />
    </article>

    <!-- <script>
      // Add emoji processing on the client side
      document.addEventListener("DOMContentLoaded", function () {
        // A function to process emojis in HTML content
        function wrapEmojisInHTML(container) {
          // Walk through all text nodes
          const treeWalker = document.createTreeWalker(
            container,
            NodeFilter.SHOW_TEXT,
            null,
            false
          );

          const textNodes = [];
          let currentNode;

          // Collect all text nodes
          while ((currentNode = treeWalker.nextNode())) {
            textNodes.push(currentNode);
          }

          // Simpler emoji regex that works in browser JavaScript
          const emojiRegex = /(\p{Emoji})/gu;

          // Process each text node
          textNodes.forEach(textNode => {
            // Skip if parent is already an emoji span
            if (
              textNode.parentNode &&
              textNode.parentNode.classList &&
              textNode.parentNode.classList.contains("emoji")
            ) {
              return;
            }

            const text = textNode.nodeValue;
            if (!text) return;

            try {
              const emojiMatches = [...text.matchAll(emojiRegex)];

              if (emojiMatches && emojiMatches.length > 0) {
                const fragment = document.createDocumentFragment();
                let lastIndex = 0;

                emojiMatches.forEach(match => {
                  // Add text before emoji
                  if (match.index > lastIndex) {
                    fragment.appendChild(
                      document.createTextNode(
                        text.substring(lastIndex, match.index)
                      )
                    );
                  }

                  // Create wrapped emoji
                  const emojiSpan = document.createElement("span");
                  emojiSpan.className = "emoji";
                  emojiSpan.textContent = match[0];
                  fragment.appendChild(emojiSpan);

                  lastIndex = match.index + match[0].length;
                });

                // Add any remaining text
                if (lastIndex < text.length) {
                  fragment.appendChild(
                    document.createTextNode(text.substring(lastIndex))
                  );
                }

                // Replace original text node with our processed fragment
                if (textNode.parentNode) {
                  textNode.parentNode.replaceChild(fragment, textNode);
                }
              }
            } catch (e) {
              console.error("Error processing emojis:", e);
            }
          });
        }

        // Process the article content
        const articleContent = document.querySelector("#article");
        if (articleContent) {
          wrapEmojisInHTML(articleContent);
        }
      });
    </script> -->

    <ul class="my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <button
        id="back-to-top"
        class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Back to Top</span>
      </button>

      <ShareModal
        client:load
        url={url}
        title={post.data.title}
        description={post.data.description}
      />
    </div>

    <PostNavigation
      client:load
      currentSlug={post.slug}
      availableSlugs={sortedPosts.map(p => p.slug)}
      nextPostSlug={nextPost?.slug}
      nextPostTitle={nextPost?.data.title}
      prevPostSlug={prevPost?.slug}
      prevPostTitle={prevPost?.data.title}
    />
  </main>
  <Footer showPrevNext={!!nextPost || !!prevPost} />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-3xl font-semibold text-skin-accent uppercase;
  }

  .map-container {
    width: 100%;
    height: 10%; /* Adjust the height for balance */
    max-width: 900px;
    margin: 30px auto;
    border-radius: 4px; /* Soft rounded corners */
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Optional shadow */
  }

  .map-image {
    width: 100%;
    height: 100%; /* Ensure the image fills the container */
    display: block;
    filter: brightness(70%) grayscale(100%) contrast(90%); /* Monochrome effect with reduced brightness */
    object-fit: cover; /* Ensure the map covers the space without distortion */
    transition: transform 0.3s ease-in-out;
  }

  .map-image:hover {
    transform: scale(1.05); /* Subtle zoom on hover */
  }
</style>
<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
