import React, { useMemo, useEffect, useRef } from 'react';
import { motion, useScroll, useTransform } from 'framer-motion';

const MapIllustration = ({ 
  title,
  coordinates,
  mapboxToken,
  width = 800,
  height = 200,
  mwidth = 850,
  mheight = 250,
  zoom = 5,
  bearing = 0,
  pitch = 0
}) => {
  const ref = useRef(null);
  const { scrollYProgress } = useScroll({ target: ref, offset: ['start end', 'end start'] });
  const parallax = useTransform(scrollYProgress, [0, 1], [0, -30]);

  useEffect(() => {
    console.log('MapIllustration mounted with props:', { title, coordinates, mapboxToken: mapboxToken ? '[PRESENT]' : '[MISSING]' });
  }, []);

  if (!title || !coordinates || !mapboxToken) {
    console.error('Missing required props:', { title, coordinates, mapboxToken });
    return <div className="relative w-full h-full bg-gray-100 flex items-center justify-center"><p className="text-red-500">Error: Missing required props</p></div>;
  }

  const letterPositions = useMemo(() => {
    const letters = title.replace(/\s+/g, '').slice(0, 5).toUpperCase();
    return letters.split('').map(letter => ({
      letter,
      x: Math.random() * width * 0.8 + width * 0.1,
      y: Math.random() * height * 0.8 + height * 0.1,
      rotation: [0, 90, 180, 270][Math.floor(Math.random() * 4)],
      color: getMidCenturyColor(),
      scale: 1.5 + Math.random() * 0.8
    }));
  }, [title, width, height]);

  function getMidCenturyColor() {
    const colors = ['rgba(230, 0, 0, 0.6)', 'rgba(0, 0, 0, 0.6)', 'rgba(255, 255, 255, 0.6)'];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  const mapUrl = `https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/${coordinates[1]},${coordinates[0]},${zoom},${bearing},${pitch}/${mwidth}x${mheight}?access_token=${mapboxToken}`;

  return (
    <div ref={ref} className="relative w-full h-[200px] overflow-hidden">
      <motion.div className="absolute inset-0" style={{ opacity: 0.5 }}>
        <motion.img 
          src={mapUrl} 
          alt="Map"
          className="w-full h-full object-cover filter grayscale contrast-90" 
          initial={{ opacity: 0 }} 
          animate={{ opacity: 1 }}
          transition={{ duration: 1.5 }}
        />
      </motion.div>
      
      <motion.svg className="absolute inset-0 w-full h-full pointer-events-none" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio="none" style={{ y: parallax }}>
        {letterPositions.map((pos, index) => (
          <motion.g key={index} transform={`translate(${pos.x},${pos.y}) rotate(${pos.rotation})`}>
            <motion.text
              style={{
                fill: pos.color,
                fontSize: `${350 * pos.scale}px`,
                fontFamily: 'Faune, sans-serif',
                opacity: 0.8,
                transformOrigin: 'center',
              }}
              textAnchor="middle"
              dominantBaseline="middle"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 1 }}
            >
              {pos.letter}
            </motion.text>
          </motion.g>
        ))}
      </motion.svg>
    </div>
  );
};

export default MapIllustration;