# Sample workflow for building and deploying an Astro site to GitHub Pages
name: Deploy Astro site to Pages with Metadata Enhancement
on:
  push:
    branches: ["main"]
  workflow_dispatch:
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
env:
  BUILD_PATH: "."
  PUBLIC_MAPBOX_ACCESS_TOKEN: ${{ secrets.PUBLIC_MAPBOX_ACCESS_TOKEN }}
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml python-slugify requests google-generativeai python-dotenv
        working-directory: ${{ env.BUILD_PATH }}
      # - name: Enhance Blog Posts
      #   run: python markdown-header-processor.py --directory src/content/blog
      #   working-directory: ${{ env.BUILD_PATH }}
      #   env:
      #     GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      # - name: Commit Changes
      #   run: |
      #     git config --global user.name 'GitHub Actions Bot'
      #     git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      #     git add src/content/blog/*.md
      #     git commit -m "Add AI-generated metadata to blog posts [skip ci]" || echo "No changes to commit"
      #     git push
      #   working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          echo "PUBLIC_MAPBOX_ACCESS_TOKEN=$PUBLIC_MAPBOX_ACCESS_TOKEN" >> $GITHUB_ENV
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
          --site "${{ steps.pages.outputs.origin }}" \
          --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4